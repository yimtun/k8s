command: ["dd","if=/dev/zero","of=/dev/null"]

dd 命令可以把一个cpu  打满

request 并不决定实际使用多少


ex1

cat >  resource.yaml  <<   EOF
apiVersion: v1
kind: Pod
metadata:
  name: requests-pod
spec:
  containers:
  - name: main
    image: busybox
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 200m
        memory: "10Mi"
    command: ["dd","if=/dev/zero","of=/dev/null"]
EOF


kubectl  create  -f resource.yaml

kubectl  get pod requests-pod 
NAME           READY   STATUS    RESTARTS   AGE
requests-pod   1/1     Running   0          40s


kubectl  top pod requests-pod 
NAME           CPU(cores)   MEMORY(bytes)   
requests-pod   999m         0Mi            


kubectl  get pod requests-pod  -o wide
NAME           READY   STATUS    RESTARTS   AGE     IP           NODE             NOMINATED NODE
requests-pod   1/1     Running   0          7m17s   172.30.6.3   192.168.10.242   <none>



在 242 上

docker ps|grep requests-pod
94f3969365cc        af2f74c517aa                                                 "dd if=/dev/zero of=…"   8 minutes ago       Up 8 minutes                            k8s_main_requests-pod_default_a0e76038-86d8-11e9-8483-5254003d139c_0
e84f5fb05b9c        registry.access.redhat.com/rhel7/pod-infrastructure:latest   "/usr/bin/pod"           8 minutes ago       Up 8 minutes                            k8s_POD_requests-pod_default_a0e76038-86d8-11e9-8483-5254003d139c_0



docker stats  94f3969365cc

CONTAINER ID        NAME                                                                   CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS
94f3969365cc        k8s_main_requests-pod_default_a0e76038-86d8-11e9-8483-5254003d139c_0   101.47%             692KiB / 7.638GiB   0.01%               0B / 0B             1.16MB / 0B         1

CONTAINER ID        NAME                                                                   CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS
94f3969365cc        k8s_main_requests-pod_default_a0e76038-86d8-11e9-8483-5254003d139c_0   101.88%             692KiB / 7.638GiB   0.01%               0B / 0B             1.16MB / 0B         1


cpu 使用率 100%

虽然request CPU 是200m 但是实际使用的确实 100%

242 上  top -d 1

top -d 1

使用满了一个核心   一个四个核心  使用了  四分之一的cpu 资源

说明  request 决定不了使用上限

kubectl  delete  -f  resource.yaml 




ex2  镜像是自己制作

宿主机是4核心  command: ["stress","-c","4"]  没有容器都能使用100%的cpu
每个容器开启4个线程 每个容器都有把cpu 全部打满的能力 

243

docker pull progrium/stress
docker tag progrium/stress ubuntu-stress



cat > pod-request-stress-1000-1.yaml << EOF
apiVersion: v1
kind: Pod
metadata:
  name: requests-pod-1000
spec:
  nodeSelector:
    kubernetes.io/hostname: 192.168.10.243
  containers:
  - name: main
    image: ubuntu-stress
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 1000m
        memory: "10Mi"
    command: ["stress","-c","4"]
EOF

kubectl  create  -f pod-request-stress-1000-1.yaml 

kubectl  get pod requests-pod-1000 -o wide
NAME                READY   STATUS    RESTARTS   AGE   IP            NODE             NOMINATED NODE
requests-pod-1000   1/1     Running   0          61s   172.30.13.3   192.168.10.243   <none>

kubectl  exec -it requests-pod-1000  bash

top  

top - 15:27:03 up 5 days,  7:01,  0 users,  load average: 8.29, 3.22, 1.30
Tasks:   7 total,   5 running,   2 sleeping,   0 stopped,   0 zombie
%Cpu0  : 99.7 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.3 st
%Cpu1  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu2  : 99.6 us,  0.4 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu3  : 99.3 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.7 st
KiB Mem:   8008960 total,  1634564 used,  6374396 free,     2088 buffers
KiB Swap:        0 total,        0 used,        0 free.   865376 cached Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                        
      9 root      20   0    7304     96      0 R  99.4  0.0   2:11.10 stress                                                                                         
     11 root      20   0    7304     96      0 R  99.1  0.0   2:10.94 stress                                                                                         
      8 root      20   0    7304     96      0 R  98.4  0.0   2:10.54 stress                                                                                         
     10 root      20   0    7304     96      0 R  97.8  0.0   2:11.24 stress                                                                                         
      1 root      20   0    7304    424    340 S   0.0  0.0   0:00.03 stress                                                                                         
     12 root      20   0   18156   1808   1416 S   0.0  0.0   0:00.01 bash                                                                                           
     20 root      20   0   19868   1356   1012 R   0.0  0.0   0:00.00 top                 


四个 stress  进程打满了四个宿主机CPU
request 是 1000m 一个核心  实际使用了4个核心


在创建一个 request 1000m



cat > pod-request-stress-1000.yaml << EOF
apiVersion: v1
kind: Pod
metadata:
  name: requests-pod-1000-1
spec:
  nodeSelector:
    kubernetes.io/hostname: 192.168.10.243
  containers:
  - name: main
    image: ubuntu-stress
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 1000m
        memory: "10Mi"
    command: ["stress","-c","4"]
EOF


kubectl  create  -f pod-request-stress-1000.yaml 
pod/requests-pod-1000-1 created
[root@master01 ~]# kubectl  get pod  requests-pod-1000-1 
NAME                  READY   STATUS    RESTARTS   AGE
requests-pod-1000-1   1/1     Running   0          18s



查看开始创建的pod cpu 使用率  已经有所下降   大致用了 四个 半核心  一共使用两个 核心 
kubectl  exec -it requests-pod-1000  bash
root@requests-pod-1000:/# top -d  1
Tasks:   7 total,   5 running,   2 sleeping,   0 stopped,   0 zombie
%Cpu0  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu1  : 99.6 us,  0.4 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu2  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu3  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   8008960 total,  1648252 used,  6360708 free,     2088 buffers
KiB Swap:        0 total,        0 used,        0 free.   867112 cached Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                        
     10 root      20   0    7304     96      0 R  51.2  0.0   9:49.68 stress                                                                                         
     11 root      20   0    7304     96      0 R  48.3  0.0   9:50.12 stress                                                                                         
      8 root      20   0    7304     96      0 R  46.3  0.0   9:46.36 stress                                                                                         
      9 root      20   0    7304     96      0 R  44.9  0.0   9:50.00 stress                                                                                         
      1 root      20   0    7304    424    340 S   0.0  0.0   0:00.03 stress                                                                                         
     21 root      20   0   18156   1892   1444 S   0.0  0.0   0:00.00 bash                                                                                           
     30 root      20   0   19868   1356   1012 R   0.0  0.0   0:00.00 top                       


使用四个核心 每个核心大致使用一半的cpu




requests-pod-1000-1  也是每个核心用了一半

kubectl  exec -it requests-pod-1000-1 bash
root@requests-pod-1000-1:/# top -d 1
Tasks:   7 total,   5 running,   2 sleeping,   0 stopped,   0 zombie
%Cpu0  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu1  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu2  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu3  : 97.9 us,  1.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  1.0 st
KiB Mem:   8008960 total,  1649124 used,  6359836 free,     2088 buffers
KiB Swap:        0 total,        0 used,        0 free.   867420 cached Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                        
      8 root      20   0    7304    100      0 R  64.7  0.0   2:27.64 stress                                                                                         
     10 root      20   0    7304    100      0 R  55.8  0.0   2:30.94 stress                                                                                         
      9 root      20   0    7304    100      0 R  48.8  0.0   2:32.53 stress                                                                                         
      7 root      20   0    7304    100      0 R  45.8  0.0   2:30.06 stress                                                                                         
      1 root      20   0    7304    428    340 S   0.0  0.0   0:00.00 stress                                                                                         
     11 root      20   0   18156   1888   1440 S   0.0  0.0   0:00.00 bash                                                                                           
     20 root      20   0   19868   1388   1044 R   0.0  0.0   0:00.00 top                        




宿主机的cpu  已经打满了 idle 都是0 


再创建一个容器


cat > pod-request-stress-2000.yaml  << EOF
apiVersion: v1
kind: Pod
metadata:
  name: requests-pod-2000
spec:
  nodeSelector:
    kubernetes.io/hostname: 192.168.10.243
  containers:
  - name: main
    image: ubuntu-stress
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 2000m
        memory: "10Mi"
    command: ["stress","-c","4"]
EOF


kubectl  create -f pod-request-stress-2000.yaml 

处于pending状态

kubectl  get pod requests-pod-2000 -o wide
NAME                READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE
requests-pod-2000   0/1     Pending   0          23s   <none>   <none>   <none>

kubectl  describe  pod requests-pod-2000

Warning  FailedScheduling  0s (x16 over 69s)  default-scheduler  0/2 nodes are available: 1 Insufficient cpu, 1 node(s) didn't match node selector.

cpu 有压力了 不够分了 


kubectl  describe node 192.168.10.243
Non-terminated Pods:         (7 in total)
  Namespace                  Name                                     CPU Requests  CPU Limits  Memory Requests  Memory Limits
  ---------                  ----                                     ------------  ----------  ---------------  -------------
  default                    requests-pod-1000                        1 (25%)       0 (0%)      10Mi (0%)        0 (0%)
  default                    requests-pod-1000-1                      1 (25%)       0 (0%)      10Mi (0%)        0 (0%)
  kube-system                coredns-779ffd89bd-d67z4                 100m (2%)     0 (0%)      70Mi (0%)        170Mi (2%)
  kube-system                heapster-77db4c4496-sstxz                0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                kubernetes-dashboard-659798bd99-gjjnm    50m (1%)      100m (2%)   100Mi (1%)       300Mi (3%)
  kube-system                monitoring-grafana-5c5fbc85b-45dtk       0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                monitoring-influxdb-679d6dfb4d-xhbs5     0 (0%)        0 (0%)      0 (0%)           0 (0%)


Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource  Requests     Limits
  --------  --------     ------
  cpu       2150m (53%)  100m (2%)
  memory    190Mi (2%)   470Mi (6%)
Events:     <none>

requests 53%  分出去了53%  剩下的不到 50%  所以无法调度两个核心的 request


尝试删除资源 腾出request

kubectl  -n kube-system delete  pod kubernetes-dashboard-659798bd99-gjjnm

kubectl  -n kube-system delete  pod  coredns-779ffd89bd-d67z4


kubectl  get pod requests-pod-2000 -o wide
NAME                READY   STATUS    RESTARTS   AGE     IP            NODE             NOMINATED NODE
requests-pod-2000   1/1     Running   0          8m54s   172.30.13.4   192.168.10.243   <none>


kubectl  describe node 192.168.10.243
Non-terminated Pods:         (6 in total)
  Namespace                  Name                                    CPU Requests  CPU Limits  Memory Requests  Memory Limits
  ---------                  ----                                    ------------  ----------  ---------------  -------------
  default                    requests-pod-1000                       1 (25%)       0 (0%)      10Mi (0%)        0 (0%)
  default                    requests-pod-1000-1                     1 (25%)       0 (0%)      10Mi (0%)        0 (0%)
  default                    requests-pod-2000                       2 (50%)       0 (0%)      10Mi (0%)        0 (0%)
  kube-system                heapster-77db4c4496-sstxz               0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                monitoring-grafana-5c5fbc85b-45dtk      0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                monitoring-influxdb-679d6dfb4d-xhbs5    0 (0%)        0 (0%)      0 (0%)           0 (0%)
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource  Requests   Limits
  --------  --------   ------
  cpu       4 (100%)   0 (0%)
  memory    30Mi (0%)  0 (0%)
Events:     <none>



视频中   ???

                requests
cpu            3010 (75%)


查看最开始创建的 pod 使用了每个核心的 25%  
kubectl  exec -it requests-pod-1000  bash
top -d 1
top - 15:59:35 up 5 days,  7:33,  0 users,  load average: 17.57, 18.02, 14.18
Tasks:   7 total,   5 running,   2 sleeping,   0 stopped,   0 zombie
%Cpu0  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu1  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu2  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
%Cpu3  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   8008960 total,  1636028 used,  6372932 free,     2088 buffers
KiB Swap:        0 total,        0 used,        0 free.   870816 cached Mem

    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                        
     10 root      20   0    7304     96      0 R  26.7  0.0  19:29.59 stress                                                                                         
      8 root      20   0    7304     96      0 R  25.7  0.0  19:18.01 stress                                                                                         
     11 root      20   0    7304     96      0 R  24.7  0.0  19:25.87 stress                                                                                         
      9 root      20   0    7304     96      0 R  23.7  0.0  19:24.65 stress                                                                                         
      1 root      20   0    7304    424    340 S   0.0  0.0   0:00.03 stress                                                                                         
     40 root      20   0   18156   1892   1444 S   0.0  0.0   0:00.00 bash                                                                                           
     48 root      20   0   19868   1384   1044 R   0.0  0.0   0:00.00 top                  



[root@master01 ~]# kubectl  top node
NAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
192.168.10.242   1049m        26%    325Mi           4%        
192.168.10.243   3994m        99%    708Mi           9%        
[root@master01 ~]# kubectl  top pod
NAME                  CPU(cores)   MEMORY(bytes)   
requests-pod          998m         0Mi             
requests-pod-1000     994m         4Mi             
requests-pod-1000-1   982m         1Mi             
requests-pod-2000     1971m        1Mi             



在创建一个pod  仅仅需要0.001 核心

cat > request-1.yaml << EOF
apiVersion: v1
kind: Pod
metadata:
  name: requests-pod-1
spec:
  nodeSelector:
    kubernetes.io/hostname: 192.168.10.243
  containers:
  - name: main
    image: ubuntu-stress
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 1m
        memory: "10Mi"
    command: ["stress","-c","4"]
EOF


kubectl  create  -f request-1.yaml
kubectl get pod requests-pod-1

kubectl get pod requests-pod-1
NAME             READY   STATUS    RESTARTS   AGE
requests-pod-1   0/1     Pending   0          80s


pending   待调度  正在调度中  

查看 event

kubectl describe  pod requests-pod-1


Events:
  Type     Reason            Age                   From               Message
  ----     ------            ----                  ----               -------
  Warning  FailedScheduling  55s (x25 over 2m48s)  default-scheduler  0/2 nodes are available: 1 Insufficient cpu, 1 node(s) didn't match node selector.


调度失败 CPU  有压力了


kubectl get pod requests-pod-1  -o yaml
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: 2019-06-04T16:10:29Z
    message: '0/2 nodes are available: 1 Insufficient cpu, 1 node(s) didn''t match
      node selector.'
    reason: Unschedulable
    status: "False"
    type: PodScheduled
  phase: Pending
  qosClass: Burstable



kubectl get pod requests-pod-1  -o json| jq .status
{
  "conditions": [
    {
      "lastProbeTime": null,
      "lastTransitionTime": "2019-06-04T16:10:29Z",
      "message": "0/2 nodes are available: 1 Insufficient cpu, 1 node(s) didn't match node selector.",
      "reason": "Unschedulable",
      "status": "False",
      "type": "PodScheduled"
    }
  ],
  "phase": "Pending",
  "qosClass": "Burstable"
}


平台上建议把 event 抛给用户
平台有个接口 失败通过界面就可以看见



192.168.10.243

docker stats

CONTAINER ID        NAME                                                                                                   CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
96ea8e4dfb60        k8s_main_requests-pod-2000_default_5aede67c-86df-11e9-8483-5254003d139c_0                              216.63%             1.605MiB / 7.638GiB   0.02%               0B / 0B             0B / 0B             5
89d2c1a96365        k8s_POD_requests-pod-2000_default_5aede67c-86df-11e9-8483-5254003d139c_0                               0.00%               972KiB / 7.638GiB     0.01%               0B / 0B             0B / 0B             5
28988d4fd433        k8s_main_requests-pod-1000-1_default_219e4a53-86de-11e9-8483-5254003d139c_0                            110.34%             1.977MiB / 7.638GiB   0.03%               0B / 0B             0B / 0B             5
27d76d0344ab        k8s_POD_requests-pod-1000-1_default_219e4a53-86de-11e9-8483-5254003d139c_0                             0.00%               1.129MiB / 7.638GiB   0.01%               0B / 0B             0B / 0B             5
486b624a2fb6        k8s_main_requests-pod-1000_default_e46378ab-86dc-11e9-8483-5254003d139c_0                              86.86%              2.57MiB / 7.638GiB    0.03%               0B / 0B             5.17MB / 0B         5
d9e7a06b763a        k8s_POD_requests-pod-1000_default_e46378ab-86dc-11e9-8483-5254003d139c_0                               0.00%               1.449MiB / 7.638GiB   0.02%               0B / 0B             0B / 0B             5
00e5a6fa44f6        k8s_influxdb_monitoring-influxdb-679d6dfb4d-xhbs5_kube-system_065e6c57-6a2e-11e9-9cf2-5254003d139c_1   0.31%               164.2MiB / 7.638GiB   2.10%               4.15GB / 61MB       62.8MB / 1.75GB     12
1a7eea476a04        k8s_grafana_monitoring-grafana-5c5fbc85b-45dtk_kube-system_6f3ee36c-62a5-11e9-996d-5254003d139c_2      0.02%               14.39MiB / 7.638GiB   0.18%               6.33MB / 1.31MB     32.7MB / 0B         13
123fe3a6cd82        k8s_heapster_heapster-77db4c4496-sstxz_kube-system_6fda3ce0-62a5-11e9-996d-5254003d139c_2              0.01%               36.04MiB / 7.638GiB   0.46%               5.69GB / 4.24GB     38.3MB / 0B         9
7337660fd342        k8s_POD_monitoring-influxdb-679d6dfb4d-xhbs5_kube-system_065e6c57-6a2e-11e9-9cf2-5254003d139c_1        0.00%               1.617MiB / 7.638GiB   0.02%               4.15GB / 61MB       0B / 0B             5
71ec82d87ceb        k8s_POD_monitoring-grafana-5c5fbc85b-45dtk_kube-system_6f3ee36c-62a5-11e9-996d-5254003d139c_2          0.00%               1.48MiB / 7.638GiB    0.02%               6.33MB / 1.31MB     0B / 0B             5
db89426006a9        k8s_POD_heapster-77db4c4496-sstxz_kube-system_6fda3ce0-62a5-11e9-996d-5254003d139c_2                   0.00%               1.531MiB / 7.638GiB   0





request 除了调度相关   当打满的时候 可以按照比例切分


释放资源

kubectl  delete pod requests-pod-1
kubectl  delete pod requests-pod-1000
kubectl  delete pod requests-pod-1000-1  --grace-period=0 --wait=false
kubectl  delete pod requests-pod-2000   --grace-period=0 --wait=false

kubectl  top node
NAME             CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
192.168.10.242   1050m        26%    324Mi           4%        
192.168.10.243   2328m        58%    700Mi           9%        








ubuntu-stress 怎么制作?
