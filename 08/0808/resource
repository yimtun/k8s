pod resoruce  

1 request
没有limit  可以无限使用资源  紧张的时候按照 request 比例切分

2 limit


超卖 

qos 级别

生产中 最好没有 BestEffort   
至少是  Burstable

基于 ns  的 quota  内存  CPU  pod  pv pvc  service serviceloadblanceer 


除了 基于ns 的quota 限制 还可以更细粒度的限制

qos 级别 缩小范围
pod 状态


扩展资源   比如磁盘    和CRD 并不一样

ex1

kubectl create namespace pod-extend-resource

kubectl proxy  


cat > disk.sh  << EOF
#!/bin/bash
curl -XPATCH http://127.0.0.1:8001/api/v1/nodes/\$1/status -H "Accept: application/json" -H "Content-Type: application/json-patch+json"  -d '
[
{
    "op": "add",
    "path": "/status/capacity/reboot.kubernetes.com~1volume",
    "value": "2700"
}
]'
EOF


sh  disk.sh 192.168.10.243


kubectl  describe  no 192.168.10.243 
kubectl  describe  node  192.168.10.243 
Capacity:
 cpu:                           4
 ephemeral-storage:             36805060Ki
 hugepages-1Gi:                 0
 hugepages-2Mi:                 0
 memory:                        7992344Ki
 pods:                          110
 reboot.kubernetes.com/volume:  2700



Non-terminated Pods:         (4 in total)
  Namespace                  Name                                    CPU Requests  CPU Limits  Memory Requests  Memory Limits
  ---------                  ----                                    ------------  ----------  ---------------  -------------
  default                    limit-pod                               200m (5%)     200m (5%)   20Mi (0%)        20Mi (0%)
  kube-system                heapster-77db4c4496-sstxz               0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                monitoring-grafana-5c5fbc85b-45dtk      0 (0%)        0 (0%)      0 (0%)           0 (0%)
  kube-system                monitoring-influxdb-679d6dfb4d-xhbs5    0 (0%)        0 (0%)      0 (0%)           0 (0%)
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource                      Requests   Limits
  --------                      --------   ------
  cpu                           200m (5%)  200m (5%)
  memory                        20Mi (0%)  20Mi (0%)
  reboot.kubernetes.com/volume  0          0




给宿主机放水就是这个值 Capacity 



cat  > disk-pod.yaml  << EOF
apiVersion: v1
kind: Pod
metadata:
  name: volume1
spec:
  containers:
  - name: volume1
    image: nginx
    imagePullPolicy: IfNotPresent
    resources:
      limits:
        cpu: "2"
        reboot.kubernetes.com/volume: 300
        memory: 4Gi
      requests:
        cpu: "0"
        reboot.kubernetes.com/volume: 300
        memory: "0"
EOF



requests  写0 占个位置 不写就和 limit 一样了


kubectl  -n  pod-extend-resource create  -f disk-pod.yaml


kubectl  describe  no 192.168.10.243
Allocated resources:
  (Total limits may be over 100 percent, i.e., overcommitted.)
  Resource                      Requests   Limits
  --------                      --------   ------
  cpu                           200m (5%)  2200m (55%)
  memory                        20Mi (0%)  4116Mi (53%)
  reboot.kubernetes.com/volume  300        300



创建第二个pod，使用该扩展资源：



cat << EOF > pod-extend-example02.yaml
apiVersion: v1
kind: Pod
metadata:
  name: volume2
spec:
  containers:
  - name: volume2
    image: nginx
    imagePullPolicy: IfNotPresent    
    resources:
      limits:
        cpu: "2"
        reboot.kubernetes.com/volume: 2700
        memory: 4Gi
      requests:
        cpu: "0"
        reboot.kubernetes.com/volume: 2700
        memory: "0"
EOF



kubectl  -n  pod-extend-resource create  -f  pod-extend-example02.yaml

kubectl  -n pod-extend-resource  get pod
NAME      READY   STATUS    RESTARTS   AGE
volume1   1/1     Running   0          16m
volume2   0/1     Pending   0          20s


如何删除上报的 node 自定义资源




kubectl  describe  no 192.168.10.243

Events:                         <none>

没有event
