cd /opt/k8s-v1.12.0-rc.2/kubernetes

tar xzvf kubernetes-src.tar.gz

cd /opt/k8s-v1.12.0-rc.2/kubernetes/cluster/addons/dns/coredns/

cp coredns.yaml.base coredns.yaml


/__PILLAR__DNS__DOMAIN__

kubernetes cluster.local. in-addr.arpa ip6.arpa

/__PILLAR__DNS__SERVER__

clusterIP: 10.254.0.2


docker pull k8s.gcr.io/coredns:1.2.2


docker pull coredns/coredns:1.2.2
docker tag coredns/coredns:1.2.2 k8s.gcr.io/coredns:1.2.2


kubectl create -f coredns.yaml

kubectl  get  svc  -n kube-system
NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE
kube-dns   ClusterIP   10.254.0.2   <none>        53/UDP,53/TCP   66s



kubectl get all -n kube-system
NAME                           READY   STATUS    RESTARTS   AGE
pod/coredns-779ffd89bd-4qk2g   1/1     Running   0          2m1s

NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE
service/kube-dns   ClusterIP   10.254.0.2   <none>        53/UDP,53/TCP   2m1s

NAME                      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/coredns   1         1         1            1           2m1s

NAME                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/coredns-779ffd89bd   1         1         1       2m1s





cat > my-nginx.yaml <<EOF
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: my-nginx
spec:
  replicas: 2
  template:
    metadata:
      labels:
        run: my-nginx
    spec:
      containers:
      - name: my-nginx
        image: nginx
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
EOF


kubectl create -f my-nginx.yaml

kubectl expose deploy my-nginx


kubectl get services --all-namespaces |grep my-nginx
default       my-nginx     ClusterIP   10.254.176.34   <none>        80/TCP          16s



cat > pod-nginx.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
    ports:
    - containerPort: 80
EOF


kubectl create -f pod-nginx.yaml
kubectl exec  nginx -i -t -- /bin/bash

cat /etc/resolv.conf
nameserver 10.254.0.2
search default.svc.cluster.local. svc.cluster.local. cluster.local.
options ndots:5



apt-get update
apt-get install iputils-ping

ping my-nginx
PING my-nginx.default.svc.cluster.local (10.254.176.34) 56(84) bytes of data.
64 bytes from my-nginx.default.svc.cluster.local (10.254.176.34): icmp_seq=1 ttl=64 time=0.056 ms
64 bytes from my-nginx.default.svc.cluster.local (10.254.176.34): icmp_seq=2 ttl=64 time=0.057 ms
64 bytes from my-nginx.default.svc.cluster.local (10.254.176.34): icmp_seq=3 ttl=64 time=0.058 ms

ping kube-dns.kube-system.svc.cluster.local
PING kube-dns.kube-system.svc.cluster.local (10.254.0.2) 56(84) bytes of data.
64 bytes from kube-dns.kube-system.svc.cluster.local (10.254.0.2): icmp_seq=1 ttl=64 time=0.032 ms
64 bytes from kube-dns.kube-system.svc.cluster.local (10.254.0.2): icmp_seq=2 ttl=64 time=0.060 ms






get service
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.254.0.1      <none>        443/TCP        171m
my-nginx     ClusterIP   10.254.176.34   <none>        80/TCP         4m34s
nginx        NodePort    10.254.11.166   <none>        80:31386/TCP   90m

























